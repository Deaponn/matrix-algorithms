import numpy as np



































def ai_mul(A, B):
    C = np.ndarray((4, 5))

    h1 = A[2, 1] * (-B[1, 0] - B[1, 4] - B[2, 0])
    h2 = (A[1, 1] + A[1, 4] - A[2, 4]) * (-B[1, 4] - B[4, 0])
    h3 = (-A[2, 0] - A[3, 0] + A[3, 1]) * (-B[0, 0] + B[1, 4])
    h4 = (A[0, 1] + A[0, 3] + A[2, 3]) * (-B[1, 4] - B[3, 0])
    h5 = (A[0, 4] + A[1, 1] + A[1, 4]) * (-B[1, 3] + B[4, 0])
    h6 = (-A[1, 1] - A[1, 4] - A[3, 4]) * (B[1, 2] + B[4, 0])
    h7 = (-A[0, 0] + A[3, 0] - A[3, 1]) * (B[0, 0] + B[1, 3])
    h8 = (A[2, 1] - A[2, 2] - A[3, 2]) * (-B[1, 2] + B[2, 0])
    h9 = (-A[0, 1] - A[0, 3] + A[3, 3]) * (B[1, 2] + B[3, 0])
    h10 = (A[1, 1] + A[1, 4]) * B[4, 0]
    h11 = (-A[1, 0] - A[3, 0] + A[3, 1]) * (-B[0, 0] + B[1, 1])
    h12 = (A[3, 0] - A[3, 1]) * B[0, 0]
    h13 = (A[0, 1] + A[0, 3] + A[1, 3]) * (B[1, 1] + B[3, 0])
    h14 = (A[0, 2] - A[2, 1] + A[2, 2]) * (B[1, 3] + B[2, 0])
    h15 = (-A[0, 1] - A[0, 3]) * B[3, 0]
    h16 = (-A[2, 1] + A[2, 2]) * B[2, 0]
    h17 = (A[0, 1] + A[0, 3] - A[1, 0] + A[1, 1] - A[1, 2] + A[1, 3] - A[2, 1] + A[2, 2] - A[3, 0] + A[3, 1]) * B[1, 1]
    h18 = A[1, 0] * (B[0, 0] + B[0, 1] + B[4, 1])
    h19 = -A[1, 2] * (B[2, 0] + B[2, 1] + B[4, 1])
    h20 = (-A[0, 4] + A[1, 0] + A[1, 2] - A[1, 4]) * (-B[0, 0] - B[0, 1] + B[0, 3] - B[4, 1])
    h21 = (A[1, 0] + A[1, 2] - A[1, 4]) * B[4, 1]
    h22 = (A[0, 2] - A[0, 3] - A[1, 3]) * (B[0, 0] + B[0, 1] - B[0, 3] - B[2, 0] - B[2, 1] + B[2, 3] + B[3, 3])
    h23 = A[0, 2] * (-B[2, 0] + B[2, 3] + B[3, 3])
    h24 = A[0, 4] * (-B[3, 3] - B[4, 0] + B[4, 3])
    h25 = -A[0, 0] * (B[0, 0] - B[0, 3])
    h26 = (-A[0, 2] + A[0, 3] + A[0, 4]) * B[3, 3]
    h27 = (A[0, 2] - A[2, 0] + A[2, 2]) * (B[0, 0] - B[0, 3] + B[0, 4] + B[2, 4])
    h28 = -A[2, 3] * (-B[2, 4] - B[3, 0] - B[3, 4])
    h29 = A[2, 0] * (B[0, 0] + B[0, 4] + B[2, 4])
    h30 = (A[2, 0] - A[2, 2] + A[2, 3]) * B[2, 4]
    h31 = (-A[0, 3] - A[0, 4] - A[2, 3]) * (-B[3, 3] - B[4, 0] + B[4, 3] - B[4, 4])
    h32 = (A[1, 0] + A[3, 0] + A[3, 3]) * (B[0, 2] - B[3, 0] - B[3, 1] - B[3, 2])
    h33 = A[3, 2] * (-B[2, 0] - B[2, 2])
    h34 = A[3, 3] * (-B[0, 2] + B[3, 0] + B[3, 2])
    h35 = -A[3, 4] * (B[0, 2] + B[4, 0] + B[4, 2])
    h36 = (A[1, 2] - A[1, 4] - A[3, 4]) * (B[2, 0] + B[2, 1] + B[2, 2] + B[4, 1])
    h37 = (-A[3, 0] - A[3, 3] + A[3, 4]) * B[0, 2]
    h38 = (-A[1, 2] - A[2, 0] + A[2, 2] - A[2, 3]) * (B[2, 4] + B[3, 0] + B[3, 1] +B[3, 4])
    h39 = (-A[2, 0]- A[3, 0] - A[3, 3] + A[3, 4]) * (B[0, 2] + B[4, 0] + B[4, 2] + B[4, 4])
    h40 = (-A[0, 2] + A[0, 3] + A[0, 4] - A[3, 3]) * (-B[2, 0] - B[2, 2] + B[2, 3] + B[3, 3])
    h41 = (-A[0, 0] + A[3, 0] - A[3, 4]) * (B[0, 2] + B[2, 0] + B[2, 2] - B[2, 3] + B[4, 0] + B[4, 2] - B[4, 3])
    h42 = (-A[1, 0] + A[1, 4] - A[2, 4]) * (-B[0, 0] - B[0, 1] - B[0, 4] + B[3, 0] + B[3, 1] + B[3, 4] - B[4, 1])
    h43 = A[1, 3] * (B[3, 0] + B[3, 1])
    h44 = (A[1, 2] + A[2, 1] - A[2, 2]) * (B[1, 1] - B[2, 0])
    h45 = (-A[2, 2] + A[2, 3] - A[3, 2]) * (B[2, 4] + B[3, 0] + B[3, 2] + B[3, 4] + B[4, 0] + B[4, 2] + B[4, 4])
    h46 = -A[2, 4] * (-B[4, 0] - B[4, 4])
    h47 = (A[1, 0] - A[1, 4] - A[2, 0] + A[2, 4]) * (B[0, 0] + B[0, 1] + B[0, 4] - B[3, 0] - B[3, 1] - B[3, 4])
    h48 = (-A[1, 2] + A[2, 2]) * (B[1, 1] + B[2, 1] + B[2, 4] + B[3, 0] + B[3, 1] + B[3, 4])
    h49 = (-A[0, 0] - A[0, 2] + A[0, 3] + A[0, 4] - A[1, 0] - A[1, 2] + A[1, 3] + A[1, 4]) * (-B[0, 0] - B[0, 1] + B[0, 3])
    h50 = (-A[0, 3] - A[1, 3]) * (B[1, 1] - B[2, 0] - B[2, 1] + B[2, 3] - B[3, 1] + B[3, 3])
    h51 = A[1, 1] * (B[1, 0] + B[1, 1] - B[4, 0])
    h52 = A[3, 1] * (B[0, 0] + B[1, 0] + B[1, 2])
    h53 = -A[0, 1] * (-B[1, 0] + B[1, 3] + B[3, 0])
    h54 = (A[0, 1] + A[0, 3] - A[1, 1] - A[1, 4] - A[2, 1] +A[2, 2] - A[3, 1] + A[3, 2] - A[3, 3] - A[3, 4]) * B[1, 2]
    h55 = (A[0, 3] - A[3, 3]) * (-B[1, 2] + B[2, 0] + B[2, 2] - B[2, 3] + B[3, 2] - B[3, 3])
    h56 = (A[0, 0] - A[0, 4] - A[3, 0] + A[3, 4]) * (B[2, 0] + B[2, 2] - B[2, 3] + B[4, 0] + B[4, 2] - B[4, 3])
    h57 = (-A[2, 0] - A[3, 0]) * (-B[0, 2] - B[0, 4] - B[1, 4] - B[4, 0] - B[4, 2] - B[4, 4])
    h58 = (-A[0, 3] - A[0, 4] - A[2, 3] - A[2, 4]) * (-B[4, 0] + B[4, 3] - B[4, 4])
    h59 = (-A[2, 2] + A[2, 3] - A[3, 2] + A[3, 3]) * (B[3, 0] + B[3, 2] + B[3, 4] + B[4, 0] + B[4, 2] + B[4, 4])
    h60 = (A[1, 4] + A[3, 4]) * (B[1, 2] - B[2, 0] - B[2, 1] - B[2, 2] - B[4, 1] - B[4, 2])
    h61 = (A[0, 3] + A[2, 3]) * (B[0, 0] - B[0, 3] + B[0, 4] - B[1, 4] - B[3, 3] + B[3, 4] - B[4, 0] + B[4, 3] - B[4, 4])
    h62 = (A[1, 0] + A[3, 0]) * (B[0, 1] + B[0, 2] + B[1, 1] - B[3, 0] - B[3, 1] - B[3, 2])
    h63 = (-A[2, 2] - A[3, 2]) * (-B[1, 2] - B[2, 2] - B[2, 4] - B[3, 0] - B[3, 2] - B[3, 4])
    h64 = (A[0, 0] - A[0, 2] - A[0, 3] + A[2, 0] - A[2, 2] - A[2, 3]) * (B[0, 0] - B[0, 3] + B[0, 4])
    h65 = (-A[0, 0] + A[3, 0]) * (-B[0, 2] + B[0, 3] + B[1, 3] - B[4, 0] - B[4, 2] + B[4, 3])
    h66 = (A[0, 0] - A[0, 1] + A[0, 2] - A[0, 4] - A[1, 1] - A[1, 4] - A[2, 1] + A[2, 2] - A[3, 0] + A[3, 1]) * B[1, 3]
    h67 = (A[1, 4] - A[2, 4]) * (B[0, 0] + B[0, 1] + B[0, 4] - B[1, 4] - B[3, 0] - B[3, 1] - B[3, 4] + B[4, 1] + B[4, 4])
    h68 = (A[0, 0] + A[0, 2] - A[0, 3] - A[0, 4] - A[3, 0] - A[3, 2] + A[3, 3] + A[3, 4]) * (-B[2, 0] - B[2, 2] + B[2, 3])
    h69 = (-A[0, 2] + A[0, 3] - A[1, 2] + A[1, 3]) * (-B[1, 3] - B[2, 0] - B[2, 1] + B[2, 3] - B[4, 1] + B[4, 3])
    h70 = (A[1, 2] - A[1, 4] + A[3, 2] - A[3, 4]) * (-B[2, 0] - B[2, 1] - B[2, 2])
    h71 = (-A[2, 0] + A[2, 2] - A[2, 3] + A[2, 4] - A[3, 0] + A[3, 2] - A[3, 3] + A[3, 4]) * (-B[4, 0] - B[4, 2] - B[4, 4])
    h72 = (-A[1, 0] - A[1, 3] - A[3, 0] - A[3, 3]) * (B[3, 0] + B[3, 1] + B[3, 2])
    h73 = (A[0, 2] - A[0, 3] - A[0, 4] + A[1, 2] - A[1, 3] - A[1, 4]) * (B[0, 0] + B[0, 1] - B[0, 3] + B[1, 3] + B[4, 1] - B[4, 3])
    h74 = (A[1, 0] - A[1, 2] + A[1, 3] - A[2, 0] + A[2, 2] - A[2, 3]) * (B[3, 0] + B[3, 1] + B[3, 4])
    h75 = -(A[0, 1] + A[0, 3] - A[1, 1] - A[1, 4] - A[2, 0] + A[2, 1] + A[2, 3] + A[2, 4] - A[3, 0] + A[3, 1]) * B[1, 4]
    h76 = (A[0, 2] + A[2, 2]) * (-B[0, 0] + B[0, 3] - B[0, 4] + B[1, 3] + B[2, 3] - B[2, 4])

    C[0, 0] = -h10 + h12 + h14 - h15 - h16 + h53 + h5 - h66 - h7
    C[1, 0] = h10 + h11 - h12 + h13 + h15 + h16 - h17 - h44 + h51
    C[2, 0] = h10 - h12 + h15 + h16 - h1 + h2 + h3 - h4 + h75
    C[3, 0] = -h10 + h12 - h15 - h16 + h52 + h54 - h6 - h8 + h9
    C[0, 1] = h13 + h15 + h20 + h21 - h22 + h23 + h25 - h43 + h49 + h50
    C[1, 1] = -h11 + h12 - h13 - h15 - h16 + h17 + h18 - h19 - h21 + h43 + h44
    C[2, 1] = -h16 - h19 - h21 - h28 - h29 - h38 + h42 + h44 - h47 + h48
    C[3, 1] = h11 - h12 - h18 + h21 - h32 + h33 - h34 - h36 + h62 - h70
    C[0, 2] = h15 + h23 + h24 + h34 - h37 + h40 - h41 + h55 - h56 - h9
    C[1, 2] = -h10 + h19 + h32 + h35 + h36 + h37 - h43 - h60 - h6 - h72
    C[2, 2] = -h16 - h28 + h33 + h37 - h39 + h45 - h46 + h63 - h71 - h8
    C[3, 2] = h10 + h15 + h16 - h33 + h34 - h35 - h37 - h54 + h6 + h8 - h9
    C[0, 3] = -h10 + h12 + h14 - h16 + h23 + h24 + h25 + h26 + h5 - h66 - h7
    C[1, 3] = h10 + h18 - h19 + h20 - h22 - h24 - h26 - h5 - h69 + h73
    C[2, 3] = -h14 + h16 - h23 - h26 + h27 + h29 + h31 + h46 - h58 + h76
    C[3, 3] = h12 + h25 + h26 - h33 - h35 - h40 + h41 + h65 - h68 - h7
    C[0, 4] = h15 + h24 + h25+ h27 - h28 + h30 + h31 - h4 + h61 + h64
    C[1, 4] = -h10 - h18 - h2 - h30 - h38 + h42 - h43 + h46 + h67 + h74
    C[2, 4] = -h10 + h12 - h15 + h28 + h29 - h2 - h30 - h3 + h46 + h4 - h75
    C[3, 4] = -h12 - h29 + h30 - h34 + h35 + h39 + h3 - h45 + h57 + h59

    return C

if __name__ == "__main__":
    with np.load("factorizations_r.npz") as data:
        A = np.ndarray((4, 5), buffer=np.arange(start=13, stop=4 * 5 + 13), dtype=np.int64)
        B = np.ndarray((5, 5), buffer=np.arange(start=13, stop=5 * 5 + 13), dtype=np.int64)
        C1 = ai_mul(A, B)
        C2 = A @ B
        total = 0
        for i in range(4):
            for j in range(5):
                if C1[i, j] != C2[i, j]:
                    total += 1
                    print(f"({i}, {j})")
        print((C1 == C2).all(), total)
        print(C1, "\n", C2)
        